(function (n) { "use strict"; typeof define == "function" && define.amd ? define(["jquery", "jquery.ui.widget"], n) : n(window.jQuery) })(function (n) { "use strict"; n.support.xhrFileUpload = !!(window.XMLHttpRequestUpload && window.FileReader); n.support.xhrFormDataFileUpload = !!window.FormData; n.widget("blueimp.fileupload", { options: { namespace: undefined, dropZone: n(document), fileInput: undefined, replaceFileInput: !0, paramName: undefined, singleFileUploads: !0, limitMultiFileUploads: undefined, sequentialUploads: !1, limitConcurrentUploads: undefined, forceIframeTransport: !1, redirect: undefined, redirectParamName: undefined, postMessage: undefined, multipart: !0, maxChunkSize: undefined, uploadedBytes: undefined, recalculateProgress: !0, formData: function (n) { return n.serializeArray() }, add: function (n, t) { t.submit() }, processData: !1, contentType: !1, cache: !1 }, _refreshOptionsList: ["namespace", "dropZone", "fileInput", "multipart", "forceIframeTransport"], _isXHRUpload: function (t) { return !t.forceIframeTransport && (!t.multipart && n.support.xhrFileUpload || n.support.xhrFormDataFileUpload) }, _getFormData: function (t) { var i; return typeof t.formData == "function" ? t.formData(t.form) : n.isArray(t.formData) ? t.formData : t.formData ? (i = [], n.each(t.formData, function (n, t) { i.push({ name: n, value: t }) }), i) : [] }, _getTotal: function (t) { var i = 0; return n.each(t, function (n, t) { i += t.size || 1 }), i }, _onProgress: function (n, t) { if (n.lengthComputable) { var i = t.total || this._getTotal(t.files), r = parseInt(n.loaded / n.total * (t.chunkSize || i), 10) + (t.uploadedBytes || 0); this._loaded += r - (t.loaded || t.uploadedBytes || 0); t.lengthComputable = !0; t.loaded = r; t.total = i; this._trigger("progress", n, t); this._trigger("progressall", n, { lengthComputable: !0, loaded: this._loaded, total: this._total }) } }, _initProgressListener: function (t) { var r = this, i = t.xhr ? t.xhr() : n.ajaxSettings.xhr(); i.upload && (n(i.upload).bind("progress", function (n) { var i = n.originalEvent; n.lengthComputable = i.lengthComputable; n.loaded = i.loaded; n.total = i.total; r._onProgress(n, t) }), t.xhr = function () { return i }) }, _initXHRData: function (t) { var i, r = t.files[0], u = t.multipart || !n.support.xhrFileUpload; (!u || t.blob) && (t.headers = n.extend(t.headers, { "X-File-Name": r.name, "X-File-Type": r.type, "X-File-Size": r.size }), t.blob ? u || (t.contentType = "application/octet-stream", t.data = t.blob) : (t.contentType = r.type, t.data = r)); u && n.support.xhrFormDataFileUpload && (t.postMessage ? (i = this._getFormData(t), t.blob ? i.push({ name: t.paramName, value: t.blob }) : n.each(t.files, function (n, r) { i.push({ name: t.paramName, value: r }) })) : (t.formData instanceof FormData ? i = t.formData : (i = new FormData, n.each(this._getFormData(t), function (n, t) { i.append(t.name, t.value) })), t.blob ? i.append(t.paramName, t.blob, r.name) : n.each(t.files, function (n, r) { r instanceof Blob && i.append(t.paramName, r, r.name) })), t.data = i); t.blob = null }, _initIframeSettings: function (t) { t.dataType = "iframe " + (t.dataType || ""); t.formData = this._getFormData(t); t.redirect && n("<a><\/a>").prop("href", t.url).prop("host") !== location.host && t.formData.push({ name: t.redirectParamName || "redirect", value: t.redirect }) }, _initDataSettings: function (n) { this._isXHRUpload(n) ? (this._chunkedUpload(n, !0) || (n.data || this._initXHRData(n), this._initProgressListener(n)), n.postMessage && (n.dataType = "postmessage " + (n.dataType || ""))) : this._initIframeSettings(n, "iframe") }, _initFormSettings: function (t) { t.form && t.form.length || (t.form = n(t.fileInput.prop("form"))); t.paramName || (t.paramName = t.fileInput.prop("name") || "files[]"); t.url || (t.url = t.form.prop("action") || location.href); t.type = (t.type || t.form.prop("method") || "").toUpperCase(); t.type !== "POST" && t.type !== "PUT" && (t.type = "POST") }, _getAJAXSettings: function (t) { var i = n.extend({}, this.options, t); return this._initFormSettings(i), this._initDataSettings(i), i }, _enhancePromise: function (n) { return n.success = n.done, n.error = n.fail, n.complete = n.always, n }, _getXHRPromise: function (t, i, r) { var u = n.Deferred(), f = u.promise(); return i = i || this.options.context || f, t === !0 ? u.resolveWith(i, r) : t === !1 && u.rejectWith(i, r), f.abort = u.promise, this._enhancePromise(f) }, _chunkedUpload: function (t, i) { var u = this, r = t.files[0], e = r.size, f = t.uploadedBytes = t.uploadedBytes || 0, o = t.maxChunkSize || e, l = r.webkitSlice || r.mozSlice || r.slice, s, a, h, c; return !(this._isXHRUpload(t) && l && (f || o < e)) || t.data ? !1 : i ? !0 : f >= e ? (r.error = "uploadedBytes", this._getXHRPromise(!1, t.context, [null, "error", r.error])) : (a = Math.ceil((e - f) / o), s = function (i) { return i ? s(i -= 1).pipe(function () { var e = n.extend({}, t); return e.blob = l.call(r, f + i * o, f + (i + 1) * o), e.chunkSize = e.blob.size, u._initXHRData(e), u._initProgressListener(e), h = (n.ajax(e) || u._getXHRPromise(!1, e.context)).done(function () { e.loaded || u._onProgress(n.Event("progress", { lengthComputable: !0, loaded: e.chunkSize, total: e.chunkSize }), e); t.uploadedBytes = e.uploadedBytes += e.chunkSize }) }) : u._getXHRPromise(!0, t.context) }, c = s(a), c.abort = function () { return h.abort() }, this._enhancePromise(c)) }, _beforeSend: function (n, t) { this._active === 0 && this._trigger("start"); this._active += 1; this._loaded += t.uploadedBytes || 0; this._total += this._getTotal(t.files) }, _onDone: function (t, i, r, u) { this._isXHRUpload(u) || this._onProgress(n.Event("progress", { lengthComputable: !0, loaded: 1, total: 1 }), u); u.result = t; u.textStatus = i; u.jqXHR = r; this._trigger("done", null, u) }, _onFail: function (n, t, i, r) { r.jqXHR = n; r.textStatus = t; r.errorThrown = i; this._trigger("fail", null, r); r.recalculateProgress && (this._loaded -= r.loaded || r.uploadedBytes || 0, this._total -= r.total || this._getTotal(r.files)) }, _onAlways: function (n, t, i, r) { this._active -= 1; r.textStatus = t; i && i.always ? (r.jqXHR = i, r.result = n) : (r.jqXHR = n, r.errorThrown = i); this._trigger("always", null, r); this._active === 0 && (this._trigger("stop"), this._loaded = this._total = 0) }, _onSend: function (t, i) { var r = this, f, e, s, u = r._getAJAXSettings(i), o = function (i, e) { return r._sending += 1, f = f || (i !== !1 && r._trigger("send", t, u) !== !1 && (r._chunkedUpload(u) || n.ajax(u)) || r._getXHRPromise(!1, u.context, e)).done(function (n, t, i) { r._onDone(n, t, i, u) }).fail(function (n, t, i) { r._onFail(n, t, i, u) }).always(function (n, t, i) { if (r._sending -= 1, r._onAlways(n, t, i, u), u.limitConcurrentUploads && u.limitConcurrentUploads > r._sending) for (var f = r._slots.shift() ; f;) { if (!f.isRejected()) { f.resolve(); break } f = r._slots.shift() } }) }; return (this._beforeSend(t, u), this.options.sequentialUploads || this.options.limitConcurrentUploads && this.options.limitConcurrentUploads <= this._sending) ? (this.options.limitConcurrentUploads > 1 ? (e = n.Deferred(), this._slots.push(e), s = e.pipe(o)) : s = this._sequence = this._sequence.pipe(o, o), s.abort = function () { var n = [undefined, "abort", "abort"]; return f ? f.abort() : (e && e.rejectWith(n), o(!1, n)) }, this._enhancePromise(s)) : o() }, _onAdd: function (t, i) { var o = this, s = !0, f = n.extend({}, this.options, i), e = f.limitMultiFileUploads, r, u; if ((f.singleFileUploads || e) && this._isXHRUpload(f)) { if (!f.singleFileUploads && e) for (r = [], u = 0; u < i.files.length; u += e) r.push(i.files.slice(u, u + e)) } else r = [i.files]; return i.originalFiles = i.files, n.each(r || i.files, function (u, f) { var h = r ? f : [f], e = n.extend({}, i, { files: h }); return e.submit = function () { return e.jqXHR = this.jqXHR = o._trigger("submit", t, this) !== !1 && o._onSend(t, this), this.jqXHR }, s = o._trigger("add", t, e) }), s }, _normalizeFile: function (n, t) { t.name === undefined && t.size === undefined && (t.name = t.fileName, t.size = t.fileSize) }, _replaceFileInput: function (t) { var i = t.clone(!0); n("<form><\/form>").append(i)[0].reset(); t.after(i).detach(); n.cleanData(t.unbind("remove")); this.options.fileInput = this.options.fileInput.map(function (n, r) { return r === t[0] ? i[0] : r }); t[0] === this.element[0] && (this.element = i) }, _onChange: function (t) { var i = t.data.fileupload, r = { files: n.each(n.makeArray(t.target.files), i._normalizeFile), fileInput: n(t.target), form: n(t.target.form) }; return r.files.length || (r.files = [{ name: t.target.value.replace(/^.*\\/, "") }]), i.options.replaceFileInput && i._replaceFileInput(r.fileInput), i._trigger("change", t, r) === !1 || i._onAdd(t, r) === !1 ? !1 : void 0 }, _onPaste: function (t) { var r = t.data.fileupload, u = t.originalEvent.clipboardData, f = u && u.items || [], i = { files: [] }; return n.each(f, function (n, t) { var r = t.getAsFile && t.getAsFile(); r && i.files.push(r) }), r._trigger("paste", t, i) === !1 || r._onAdd(t, i) === !1 ? !1 : void 0 }, _onDrop: function (t) { var i = t.data.fileupload, r = t.dataTransfer = t.originalEvent.dataTransfer, u = { files: n.each(n.makeArray(r && r.files), i._normalizeFile) }; if (i._trigger("drop", t, u) === !1 || i._onAdd(t, u) === !1) return !1; t.preventDefault() }, _onDragOver: function (n) { var i = n.data.fileupload, t = n.dataTransfer = n.originalEvent.dataTransfer; if (i._trigger("dragover", n) === !1) return !1; t && (t.dropEffect = t.effectAllowed = "copy"); n.preventDefault() }, _initEventHandlers: function () { var n = this.options.namespace; this._isXHRUpload(this.options) && this.options.dropZone.bind("dragover." + n, { fileupload: this }, this._onDragOver).bind("drop." + n, { fileupload: this }, this._onDrop).bind("paste." + n, { fileupload: this }, this._onPaste); this.options.fileInput.bind("change." + n, { fileupload: this }, this._onChange) }, _destroyEventHandlers: function () { var n = this.options.namespace; this.options.dropZone.unbind("dragover." + n, this._onDragOver).unbind("drop." + n, this._onDrop).unbind("paste." + n, this._onPaste); this.options.fileInput.unbind("change." + n, this._onChange) }, _setOption: function (t, i) { var r = n.inArray(t, this._refreshOptionsList) !== -1; r && this._destroyEventHandlers(); n.Widget.prototype._setOption.call(this, t, i); r && (this._initSpecialOptions(), this._initEventHandlers()) }, _initSpecialOptions: function () { var t = this.options; t.fileInput === undefined ? t.fileInput = this.element.is("input:file") ? this.element : this.element.find("input:file") : t.fileInput instanceof n || (t.fileInput = n(t.fileInput)); t.dropZone instanceof n || (t.dropZone = n(t.dropZone)) }, _create: function () { var t = this.options, i = n.extend({}, this.element.data()); i[this.widgetName] = undefined; n.extend(t, i); t.namespace = t.namespace || this.widgetName; this._initSpecialOptions(); this._slots = []; this._sequence = this._getXHRPromise(!0); this._sending = this._active = this._loaded = this._total = 0; this._initEventHandlers() }, destroy: function () { this._destroyEventHandlers(); n.Widget.prototype.destroy.call(this) }, enable: function () { n.Widget.prototype.enable.call(this); this._initEventHandlers() }, disable: function () { this._destroyEventHandlers(); n.Widget.prototype.disable.call(this) }, add: function (t) { t && !this.options.disabled && (t.files = n.each(n.makeArray(t.files), this._normalizeFile), this._onAdd(null, t)) }, send: function (t) { return t && !this.options.disabled && (t.files = n.each(n.makeArray(t.files), this._normalizeFile), t.files.length) ? this._onSend(null, t) : this._getXHRPromise(!1, t && t.context) } }) });
//# sourceMappingURL=jquery.fileupload.min.js.map
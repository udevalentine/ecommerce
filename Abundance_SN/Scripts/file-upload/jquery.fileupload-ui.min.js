(function (n) { "use strict"; typeof define == "function" && define.amd ? define(["jquery", "tmpl", "load-image", "./jquery.fileupload-ip"], n) : n(window.jQuery, window.tmpl, window.loadImage) })(function (n, t, i) { "use strict"; var r = (n.blueimpIP || n.blueimp).fileupload; n.widget("blueimpUI.fileupload", r, { options: { autoUpload: !1, maxNumberOfFiles: undefined, maxFileSize: undefined, minFileSize: undefined, acceptFileTypes: /.+$/i, previewSourceFileTypes: /^image\/(gif|jpeg|png)$/, previewSourceMaxFileSize: 5e6, previewMaxWidth: 80, previewMaxHeight: 80, previewAsCanvas: !0, uploadTemplateId: "template-upload", downloadTemplateId: "template-download", dataType: "json", add: function (t, i) { var r = n(this).data("fileupload"), f = r.options, u = i.files; r._adjustMaxNumberOfFiles(-u.length); i.isAdjusted = !0; n(this).fileupload("resize", i).done(i, function () { i.files.valid = i.isValidated = r._validate(u); i.context = r._renderUpload(u).appendTo(f.filesContainer).data("data", i); r._renderPreviews(u, i.context); r._forceReflow(i.context); r._transition(i.context).done(function () { r._trigger("added", t, i) !== !1 && (f.autoUpload || i.autoUpload) && i.autoUpload !== !1 && i.isValidated && i.submit() }) }) }, send: function (t, i) { var r = n(this).data("fileupload"); return !i.isValidated && (i.isAdjusted || r._adjustMaxNumberOfFiles(-i.files.length), !r._validate(i.files)) ? !1 : (i.context && i.dataType && i.dataType.substr(0, 6) === "iframe" && i.context.find(".progress").addClass(!n.support.transition && "progress-animated").find(".bar").css("width", parseInt(100, 10) + "%"), r._trigger("sent", t, i)) }, done: function (t, i) { var r = n(this).data("fileupload"), u; i.context ? i.context.each(function (f) { var e = n.isArray(i.result) && i.result[f] || { error: "emptyResult" }; e.error && r._adjustMaxNumberOfFiles(1); r._transition(n(this)).done(function () { var f = n(this); u = r._renderDownload([e]).css("height", f.height()).replaceAll(f); r._forceReflow(u); r._transition(u).done(function () { i.context = n(this); r._trigger("completed", t, i) }) }) }) : (u = r._renderDownload(i.result).appendTo(r.options.filesContainer), r._forceReflow(u), r._transition(u).done(function () { i.context = n(this); r._trigger("completed", t, i) })) }, fail: function (t, i) { var r = n(this).data("fileupload"), u; r._adjustMaxNumberOfFiles(i.files.length); i.context ? i.context.each(function (f) { if (i.errorThrown !== "abort") { var e = i.files[f]; e.error = e.error || i.errorThrown || !0; r._transition(n(this)).done(function () { var f = n(this); u = r._renderDownload([e]).replaceAll(f); r._forceReflow(u); r._transition(u).done(function () { i.context = n(this); r._trigger("failed", t, i) }) }) } else r._transition(n(this)).done(function () { n(this).remove(); r._trigger("failed", t, i) }) }) : i.errorThrown !== "abort" ? (r._adjustMaxNumberOfFiles(-i.files.length), i.context = r._renderUpload(i.files).appendTo(r.options.filesContainer).data("data", i), r._forceReflow(i.context), r._transition(i.context).done(function () { i.context = n(this); r._trigger("failed", t, i) })) : r._trigger("failed", t, i) }, progress: function (n, t) { t.context && t.context.find(".progress .bar").css("width", parseInt(t.loaded / t.total * 100, 10) + "%") }, progressall: function (t, i) { n(this).find(".fileupload-buttonbar .progress .bar").css("width", parseInt(i.loaded / i.total * 100, 10) + "%") }, start: function (t) { var i = n(this).data("fileupload"); i._transition(n(this).find(".fileupload-buttonbar .progress")).done(function () { i._trigger("started", t) }) }, stop: function (t) { var i = n(this).data("fileupload"); i._transition(n(this).find(".fileupload-buttonbar .progress")).done(function () { n(this).find(".bar").css("width", "0%"); i._trigger("stopped", t) }) }, destroy: function (t, i) { var r = n(this).data("fileupload"); i.url && n.ajax(i); r._adjustMaxNumberOfFiles(1); r._transition(i.context).done(function () { n(this).remove(); r._trigger("destroyed", t, i) }) } }, _enableDragToDesktop: function () { var t = n(this), i = t.prop("href"), r = t.prop("download"), u = "application/octet-stream"; t.bind("dragstart", function (n) { try { n.originalEvent.dataTransfer.setData("DownloadURL", [u, r, i].join(":")) } catch (t) { } }) }, _adjustMaxNumberOfFiles: function (n) { typeof this.options.maxNumberOfFiles == "number" && (this.options.maxNumberOfFiles += n, this.options.maxNumberOfFiles < 1 ? this._disableFileInputButton() : this._enableFileInputButton()) }, _formatFileSize: function (n) { return typeof n != "number" ? "" : n >= 1e9 ? (n / 1e9).toFixed(2) + " GB" : n >= 1e6 ? (n / 1e6).toFixed(2) + " MB" : (n / 1e3).toFixed(2) + " KB" }, _hasError: function (n) { return n.error ? n.error : this.options.maxNumberOfFiles < 0 ? "maxNumberOfFiles" : (this.options.acceptFileTypes.test(n.type) || this.options.acceptFileTypes.test(n.name)) ? this.options.maxFileSize && n.size > this.options.maxFileSize ? "maxFileSize" : typeof n.size == "number" && n.size < this.options.minFileSize ? "minFileSize" : null : "acceptFileTypes" }, _validate: function (t) { var r = this, i = !!t.length; return n.each(t, function (n, t) { t.error = r._hasError(t); t.error && (i = !1) }), i }, _renderTemplate: function (t, i) { if (!t) return n(); var r = t({ files: i, formatFileSize: this._formatFileSize, options: this.options }); return r instanceof n ? r : n(this.options.templatesContainer).html(r).children() }, _renderPreview: function (t, r) { var e = this, u = this.options, f = n.Deferred(); return (i && i(t, function (n) { r.append(n); e._forceReflow(r); e._transition(r).done(function () { f.resolveWith(r) }) }, { maxWidth: u.previewMaxWidth, maxHeight: u.previewMaxHeight, canvas: u.previewAsCanvas }) || f.resolveWith(r)) && f }, _renderPreviews: function (t, i) { var r = this, u = this.options; return i.find(".preview span").each(function (i, f) { var e = t[i]; u.previewSourceFileTypes.test(e.type) && (n.type(u.previewSourceMaxFileSize) !== "number" || e.size < u.previewSourceMaxFileSize) && (r._processingQueue = r._processingQueue.pipe(function () { var t = n.Deferred(); return r._renderPreview(e, n(f)).done(function () { t.resolveWith(r) }), t.promise() })) }), this._processingQueue }, _renderUpload: function (n) { return this._renderTemplate(this.options.uploadTemplate, n) }, _renderDownload: function (n) { return this._renderTemplate(this.options.downloadTemplate, n).find("a[download]").each(this._enableDragToDesktop).end() }, _startHandler: function (t) { t.preventDefault(); var r = n(this), u = r.closest(".template-upload"), i = u.data("data"); i && i.submit && !i.jqXHR && i.submit() && r.prop("disabled", !0) }, _cancelHandler: function (t) { t.preventDefault(); var r = n(this).closest(".template-upload"), i = r.data("data") || {}; i.jqXHR ? i.jqXHR.abort() : (i.errorThrown = "abort", t.data.fileupload._trigger("fail", t, i)) }, _deleteHandler: function (t) { t.preventDefault(); var i = n(this); t.data.fileupload._trigger("destroy", t, { context: i.closest(".template-download"), url: i.attr("data-url"), type: i.attr("data-type") || "DELETE", dataType: t.data.fileupload.options.dataType }) }, _forceReflow: function (t) { this._reflow = n.support.transition && t.length && t[0].offsetWidth }, _transition: function (t) { var r = this, i = n.Deferred(); return n.support.transition && t.hasClass("fade") ? t.bind(n.support.transition.end, function (r) { r.target === t[0] && (t.unbind(n.support.transition.end), i.resolveWith(t)) }).toggleClass("in") : (t.toggleClass("in"), i.resolveWith(t)), i }, _initButtonBarEventHandlers: function () { var t = this.element.find(".fileupload-buttonbar"), i = this.options.filesContainer, r = this.options.namespace; t.find(".start").bind("click." + r, function (n) { n.preventDefault(); i.find(".start button").click() }); t.find(".cancel").bind("click." + r, function (n) { n.preventDefault(); i.find(".cancel button").click() }); t.find(".delete").bind("click." + r, function (n) { n.preventDefault(); i.find(".delete input:checked").siblings("button").click(); t.find(".toggle").prop("checked", !1) }); t.find(".toggle").bind("change." + r, function () { i.find(".delete input").prop("checked", n(this).is(":checked")) }) }, _destroyButtonBarEventHandlers: function () { this.element.find(".fileupload-buttonbar button").unbind("click." + this.options.namespace); this.element.find(".fileupload-buttonbar .toggle").unbind("change." + this.options.namespace) }, _initEventHandlers: function () { r.prototype._initEventHandlers.call(this); var n = { fileupload: this }; this.options.filesContainer.delegate(".start button", "click." + this.options.namespace, n, this._startHandler).delegate(".cancel button", "click." + this.options.namespace, n, this._cancelHandler).delegate(".delete button", "click." + this.options.namespace, n, this._deleteHandler); this._initButtonBarEventHandlers() }, _destroyEventHandlers: function () { var n = this.options; this._destroyButtonBarEventHandlers(); n.filesContainer.undelegate(".start button", "click." + n.namespace).undelegate(".cancel button", "click." + n.namespace).undelegate(".delete button", "click." + n.namespace); r.prototype._destroyEventHandlers.call(this) }, _enableFileInputButton: function () { this.element.find(".fileinput-button input").prop("disabled", !1).parent().removeClass("disabled") }, _disableFileInputButton: function () { this.element.find(".fileinput-button input").prop("disabled", !0).parent().addClass("disabled") }, _initTemplates: function () { var n = this.options; n.templatesContainer = document.createElement(n.filesContainer.prop("nodeName")); t && (n.uploadTemplateId && (n.uploadTemplate = t(n.uploadTemplateId)), n.downloadTemplateId && (n.downloadTemplate = t(n.downloadTemplateId))) }, _initFilesContainer: function () { var t = this.options; t.filesContainer === undefined ? t.filesContainer = this.element.find(".files") : t.filesContainer instanceof n || (t.filesContainer = n(t.filesContainer)) }, _initSpecialOptions: function () { r.prototype._initSpecialOptions.call(this); this._initFilesContainer(); this._initTemplates() }, _create: function () { r.prototype._create.call(this); this._refreshOptionsList.push("filesContainer", "uploadTemplateId", "downloadTemplateId"); n.blueimpIP || (this._processingQueue = n.Deferred().resolveWith(this).promise(), this.resize = function () { return this._processingQueue }) }, enable: function () { r.prototype.enable.call(this); this.element.find("input, button").prop("disabled", !1); this._enableFileInputButton() }, disable: function () { this.element.find("input, button").prop("disabled", !0); this._disableFileInputButton(); r.prototype.disable.call(this) } }) });
//# sourceMappingURL=jquery.fileupload-ui.min.js.map
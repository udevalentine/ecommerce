(function (n) { "use strict"; typeof define == "function" && define.amd ? define(["jquery"], n) : n(window.jQuery) })(function (n) { "use strict"; var t = 0; n.ajaxTransport("iframe", function (i) { if (i.async && (i.type === "POST" || i.type === "GET")) { var r, u; return { send: function (f, e) { r = n('<form style="display:none;"><\/form>'); u = n('<iframe src="javascript:false;" name="iframe-transport-' + (t += 1) + '"><\/iframe>').bind("load", function () { var t; u.unbind("load").bind("load", function () { var t; try { if (t = u.contents(), !t.length || !t[0].firstChild) throw new Error; } catch (i) { t = undefined } e(200, "success", { iframe: t }); n('<iframe src="javascript:false;"><\/iframe>').appendTo(r); r.remove() }); r.prop("target", u.prop("name")).prop("action", i.url).prop("method", i.type); i.formData && n.each(i.formData, function (t, i) { n('<input type="hidden"/>').prop("name", i.name).val(i.value).appendTo(r) }); i.fileInput && i.fileInput.length && i.type === "POST" && (t = i.fileInput.clone(), i.fileInput.after(function (n) { return t[n] }), i.paramName && i.fileInput.each(function () { n(this).prop("name", i.paramName) }), r.append(i.fileInput).prop("enctype", "multipart/form-data").prop("encoding", "multipart/form-data")); r.submit(); t && t.length && i.fileInput.each(function (i, r) { var u = n(t[i]); n(r).prop("name", u.prop("name")); u.replaceWith(r) }) }); r.append(u).appendTo(document.body) }, abort: function () { u && u.unbind("load").prop("src", "javascript".concat(":false;")); r && r.remove() } } } }); n.ajaxSetup({ converters: { "iframe text": function (t) { return n(t[0].body).text() }, "iframe json": function (t) { return n.parseJSON(n(t[0].body).text()) }, "iframe html": function (t) { return n(t[0].body).html() }, "iframe script": function (t) { return n.globalEval(n(t[0].body).text()) } } }) });
//# sourceMappingURL=jquery.iframe-transport.min.js.map